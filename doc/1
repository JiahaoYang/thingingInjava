类型决定接口，类是该接口的特定实现
对象——服务提供者
高内聚——重用
访问控制——设计者改变内部不影响客户端程序员
		 客户端程序员无法触及隐藏部分，只需要关注重要的接口
组合——现有对象组合成新的类has-a（首先考虑组合而不是继承）
继承——导出类具有更多特性，基类private成员被隐藏且不可访问，复制了基类的接口（具有相同的类型）
	  is-a，导出类与基类具有完全形同的接口
	  is-like-a，导出类有新的方法
多态——前期绑定，编译器产生一个对具体函数名字的调用，运行时将这个调用解析到函数的绝对地址
	  后期绑定，编译器只确保方法存在（对签名和返回值进行类型检查）
	  向上转型
单根继承，所有对象都具备某些基本功能。所有对象都能在堆上创建，参数传递方便。
		 所有对象都有类型信息，系统级操作更方便（异常，垃圾回收）
泛型——向下转型的不安全性，在运行时抛出异常
对象的创建与生命周期：c++，对象的生命周期和存储位置可以在编写程序时确定，高效（在栈中创建对象只需一条汇编指令）编译器可以确定其存活时间并自动释放
					java，在堆中创建对象，存储空间动态管理（在堆中创建对象依赖存储机制的设计）垃圾回收机制
并发：把问题切分成多个可独立运行的部分（线程）