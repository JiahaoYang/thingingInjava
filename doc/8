多态，消除类型之间的耦合关系（动态绑定）
向上转型，丢失特有的信息，留下基类和子类共有的方法
编译器无法得知参数为基类还是子类（动态绑定）

绑定：将一个方法调用同一个方法主体关联起来
前期绑定：在编译时就明确方法调用主体（由编译器连接器实现）
动态绑定：在运行时根据对象的类型进行绑定（在对象中存在类型信息）
除了static，final方法，其他全是动态绑定
可扩展：只与基类接口通信

缺陷：
私有方法无法被覆盖：导出类只继承基类的接口（public，protected），private对导出类不可见，在导出类中与基类private方法同名的方法为导出类的新方法
域访问操作都由编译器决定，不是多态的
静态方法与类关联，不是多态的

构造器编写准则：用尽可能简单的方法使对象进入正常状态，尽量避免调用其它方法

协变返回类型：导出类的覆盖方法可以返回基类方法返回类型的导出类
用继承表达行为的差异性，用字段表示状态的变化

is-a导出类没有特殊的方法
is-like-a导出类扩展了接口（向上转型后不能访问扩展的方法）
RTTI：runtimeTypeIdentify  保证转型的安全性