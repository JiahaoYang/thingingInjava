java中，初始化与创建不可分离
 
 重载：基本类型作为参数，实际参数类型<形式参数类型，实际类型会提升（char直接到int）

 this关键字：当用对象调用方法时，实际编译器的转化 ClassName.fucName(objName，para1...);

static方法，没有this关键字的方法

垃圾回收器只回收用new分配的内存
finalize：一旦垃圾回收器准备回收类占用的空间，先调用finalize方法，下一次回收时才真正清理内存
1)对象可能不被垃圾回收
2)垃圾回收不等于析构
3)垃圾回收只与内存相关
本地方法：在java中调用了非java代码，在finalize中调用free释放由malloc申请的内存
java不允许创建局部对象，必须用new
finalize 的调用时机是很不确定的！！！避免使用

垃圾回收器
自适应的垃圾回收：停止-复制，暂停程序运行，将活动对象复制到另一个堆，剩余的被清理，垃圾较少时效率低，转换到标记-清扫模式，遍历所有对象，活动对象设标记，标记完成后清理没有标记的对象
JIT即时编译技术，只在必要的时候才编译代码

初始化
类的成员变量会在构造器调用之前进行初始化
1.构造器是static方法，当创建对象或类的静态域静态方法第一次被访问时，java解释器查找类路径，定位xxx.class文件
2.载入xxx.class文件（创建class对象），静态初始化
3.用new创建对象时，在堆上分配足够空间，清零（隐式分配默认值）
4.字段定义处的初始化
5.构造器

